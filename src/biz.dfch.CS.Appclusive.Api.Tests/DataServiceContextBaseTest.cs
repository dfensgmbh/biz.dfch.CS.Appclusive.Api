/**
 * Copyright 2016 d-fens GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Data.Services.Client;
using System.Reflection;
using biz.dfch.CS.Appclusive.Core.OdataServices.Core;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Telerik.JustMock;

namespace biz.dfch.CS.Appclusive.Api.Tests
{
    [TestClass]
    public class DataServiceContextBaseTest
    {
        [TestMethod]
        public void IfThisTestBreaksWeHaveMustChangeTheBaseClassOfTheAutoGeneratedServiceReferenceEndpointToDataServiceContextBase()
        {
            var assembly = this.GetType().Assembly;
            foreach (var definedType in assembly.DefinedTypes)
            {
                if (!(definedType.IsPublic || definedType.IsNested))
                {
                    continue;
                }

                if (definedType.IsInterface)
                {
                    continue;
                }

                if (definedType.BaseType is DataServiceContext)
                {
                    var definedTypeParts = definedType.FullName.Split('.');
                    Assert.IsTrue(2 <= definedTypeParts.Length);
                    Assert.AreNotEqual(definedTypeParts[definedTypeParts.Length -1], definedTypeParts[definedTypeParts.Length -2]);
                }
            }
        }

        [Ignore]
        [TestMethod]
        public void GetSingleActionSucceeds()
        {
            // Arrange
            var id = 1L;
            var name = "arbitrary-name";
            var type = typeof(Node);

            var node = new Node
            {
                Id = id,
                Name = name
            };

            var sut = new DataServiceContextBase(new Uri("http://appclusive/api/Core"));

            var methodInfo = Mock.Create<MethodInfo>();
            Mock.Arrange(() => methodInfo.Invoke(Arg.IsAny<object>(), Arg.IsAny<object[]>()))
                .IgnoreInstance()
                .Returns(node)
                .MustBeCalled();

            // Act
            var result = sut.GetSingleEntity(type, id);
            Assert.IsNotNull(result);

            // Assert
            dynamic entity = result;
            Assert.AreEqual(id, entity.Id);
            Assert.AreEqual(name, entity.Name);

            Assert.AreEqual(type.Name, entity.GetType().Name);

            Mock.Assert(methodInfo);
        }
    }
}
